#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace lab10
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB2")]
	public partial class ContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHISTORy(HISTORy instance);
    partial void UpdateHISTORy(HISTORy instance);
    partial void DeleteHISTORy(HISTORy instance);
    partial void InsertHISTORY_PRODUCT(HISTORY_PRODUCT instance);
    partial void UpdateHISTORY_PRODUCT(HISTORY_PRODUCT instance);
    partial void DeleteHISTORY_PRODUCT(HISTORY_PRODUCT instance);
    partial void InsertHISTORY_TYPE(HISTORY_TYPE instance);
    partial void UpdateHISTORY_TYPE(HISTORY_TYPE instance);
    partial void DeleteHISTORY_TYPE(HISTORY_TYPE instance);
    partial void InsertLOCATION(LOCATION instance);
    partial void UpdateLOCATION(LOCATION instance);
    partial void DeleteLOCATION(LOCATION instance);
    partial void InsertPRODUCT_CATEGORy(PRODUCT_CATEGORy instance);
    partial void UpdatePRODUCT_CATEGORy(PRODUCT_CATEGORy instance);
    partial void DeletePRODUCT_CATEGORy(PRODUCT_CATEGORy instance);
    partial void InsertPRODUCT(PRODUCT instance);
    partial void UpdatePRODUCT(PRODUCT instance);
    partial void DeletePRODUCT(PRODUCT instance);
    partial void InsertWAREHOUSE_PRODUCT(WAREHOUSE_PRODUCT instance);
    partial void UpdateWAREHOUSE_PRODUCT(WAREHOUSE_PRODUCT instance);
    partial void DeleteWAREHOUSE_PRODUCT(WAREHOUSE_PRODUCT instance);
    partial void InsertWAREHOUSE(WAREHOUSE instance);
    partial void UpdateWAREHOUSE(WAREHOUSE instance);
    partial void DeleteWAREHOUSE(WAREHOUSE instance);
    #endregion
		
		public ContextDataContext() : 
				base(global::lab10.Properties.Settings.Default.DB2ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<HISTORy> HISTORies
		{
			get
			{
				return this.GetTable<HISTORy>();
			}
		}
		
		public System.Data.Linq.Table<HISTORY_PRODUCT> HISTORY_PRODUCTs
		{
			get
			{
				return this.GetTable<HISTORY_PRODUCT>();
			}
		}
		
		public System.Data.Linq.Table<HISTORY_TYPE> HISTORY_TYPEs
		{
			get
			{
				return this.GetTable<HISTORY_TYPE>();
			}
		}
		
		public System.Data.Linq.Table<LOCATION> LOCATIONs
		{
			get
			{
				return this.GetTable<LOCATION>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCT_CATEGORy> PRODUCT_CATEGORies
		{
			get
			{
				return this.GetTable<PRODUCT_CATEGORy>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCT> PRODUCTs
		{
			get
			{
				return this.GetTable<PRODUCT>();
			}
		}
		
		public System.Data.Linq.Table<WAREHOUSE_PRODUCT> WAREHOUSE_PRODUCTs
		{
			get
			{
				return this.GetTable<WAREHOUSE_PRODUCT>();
			}
		}
		
		public System.Data.Linq.Table<WAREHOUSE> WAREHOUSEs
		{
			get
			{
				return this.GetTable<WAREHOUSE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HISTORIES")]
	public partial class HISTORy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _DATE;
		
		private int _HISTORY_TYPE_ID;
		
		private bool _IS_DELETED;
		
		private EntitySet<HISTORY_PRODUCT> _HISTORY_PRODUCTs;
		
		private EntityRef<HISTORY_TYPE> _HISTORY_TYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDATEChanging(System.DateTime value);
    partial void OnDATEChanged();
    partial void OnHISTORY_TYPE_IDChanging(int value);
    partial void OnHISTORY_TYPE_IDChanged();
    partial void OnIS_DELETEDChanging(bool value);
    partial void OnIS_DELETEDChanged();
    #endregion
		
		public HISTORy()
		{
			this._HISTORY_PRODUCTs = new EntitySet<HISTORY_PRODUCT>(new Action<HISTORY_PRODUCT>(this.attach_HISTORY_PRODUCTs), new Action<HISTORY_PRODUCT>(this.detach_HISTORY_PRODUCTs));
			this._HISTORY_TYPE = default(EntityRef<HISTORY_TYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime DATE
		{
			get
			{
				return this._DATE;
			}
			set
			{
				if ((this._DATE != value))
				{
					this.OnDATEChanging(value);
					this.SendPropertyChanging();
					this._DATE = value;
					this.SendPropertyChanged("DATE");
					this.OnDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HISTORY_TYPE_ID", DbType="Int NOT NULL")]
		public int HISTORY_TYPE_ID
		{
			get
			{
				return this._HISTORY_TYPE_ID;
			}
			set
			{
				if ((this._HISTORY_TYPE_ID != value))
				{
					if (this._HISTORY_TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHISTORY_TYPE_IDChanging(value);
					this.SendPropertyChanging();
					this._HISTORY_TYPE_ID = value;
					this.SendPropertyChanged("HISTORY_TYPE_ID");
					this.OnHISTORY_TYPE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IS_DELETED", DbType="Bit NOT NULL")]
		public bool IS_DELETED
		{
			get
			{
				return this._IS_DELETED;
			}
			set
			{
				if ((this._IS_DELETED != value))
				{
					this.OnIS_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._IS_DELETED = value;
					this.SendPropertyChanged("IS_DELETED");
					this.OnIS_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HISTORy_HISTORY_PRODUCT", Storage="_HISTORY_PRODUCTs", ThisKey="ID", OtherKey="HISTORY_ID")]
		public EntitySet<HISTORY_PRODUCT> HISTORY_PRODUCTs
		{
			get
			{
				return this._HISTORY_PRODUCTs;
			}
			set
			{
				this._HISTORY_PRODUCTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HISTORY_TYPE_HISTORy", Storage="_HISTORY_TYPE", ThisKey="HISTORY_TYPE_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public HISTORY_TYPE HISTORY_TYPE
		{
			get
			{
				return this._HISTORY_TYPE.Entity;
			}
			set
			{
				HISTORY_TYPE previousValue = this._HISTORY_TYPE.Entity;
				if (((previousValue != value) 
							|| (this._HISTORY_TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HISTORY_TYPE.Entity = null;
						previousValue.HISTORies.Remove(this);
					}
					this._HISTORY_TYPE.Entity = value;
					if ((value != null))
					{
						value.HISTORies.Add(this);
						this._HISTORY_TYPE_ID = value.ID;
					}
					else
					{
						this._HISTORY_TYPE_ID = default(int);
					}
					this.SendPropertyChanged("HISTORY_TYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HISTORY_PRODUCTs(HISTORY_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.HISTORy = this;
		}
		
		private void detach_HISTORY_PRODUCTs(HISTORY_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.HISTORy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HISTORY_PRODUCT")]
	public partial class HISTORY_PRODUCT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HISTORY_ID;
		
		private int _PRODUCT_ID;
		
		private int _WAREHOUSE_ID;
		
		private int _COUNT;
		
		private EntityRef<HISTORy> _HISTORy;
		
		private EntityRef<PRODUCT> _PRODUCT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHISTORY_IDChanging(int value);
    partial void OnHISTORY_IDChanged();
    partial void OnPRODUCT_IDChanging(int value);
    partial void OnPRODUCT_IDChanged();
    partial void OnWAREHOUSE_IDChanging(int value);
    partial void OnWAREHOUSE_IDChanged();
    partial void OnCOUNTChanging(int value);
    partial void OnCOUNTChanged();
    #endregion
		
		public HISTORY_PRODUCT()
		{
			this._HISTORy = default(EntityRef<HISTORy>);
			this._PRODUCT = default(EntityRef<PRODUCT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HISTORY_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HISTORY_ID
		{
			get
			{
				return this._HISTORY_ID;
			}
			set
			{
				if ((this._HISTORY_ID != value))
				{
					if (this._HISTORy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHISTORY_IDChanging(value);
					this.SendPropertyChanging();
					this._HISTORY_ID = value;
					this.SendPropertyChanged("HISTORY_ID");
					this.OnHISTORY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCT_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PRODUCT_ID
		{
			get
			{
				return this._PRODUCT_ID;
			}
			set
			{
				if ((this._PRODUCT_ID != value))
				{
					if (this._PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRODUCT_IDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCT_ID = value;
					this.SendPropertyChanged("PRODUCT_ID");
					this.OnPRODUCT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WAREHOUSE_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WAREHOUSE_ID
		{
			get
			{
				return this._WAREHOUSE_ID;
			}
			set
			{
				if ((this._WAREHOUSE_ID != value))
				{
					this.OnWAREHOUSE_IDChanging(value);
					this.SendPropertyChanging();
					this._WAREHOUSE_ID = value;
					this.SendPropertyChanged("WAREHOUSE_ID");
					this.OnWAREHOUSE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUNT", DbType="Int NOT NULL")]
		public int COUNT
		{
			get
			{
				return this._COUNT;
			}
			set
			{
				if ((this._COUNT != value))
				{
					this.OnCOUNTChanging(value);
					this.SendPropertyChanging();
					this._COUNT = value;
					this.SendPropertyChanged("COUNT");
					this.OnCOUNTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HISTORy_HISTORY_PRODUCT", Storage="_HISTORy", ThisKey="HISTORY_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public HISTORy HISTORy
		{
			get
			{
				return this._HISTORy.Entity;
			}
			set
			{
				HISTORy previousValue = this._HISTORy.Entity;
				if (((previousValue != value) 
							|| (this._HISTORy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HISTORy.Entity = null;
						previousValue.HISTORY_PRODUCTs.Remove(this);
					}
					this._HISTORy.Entity = value;
					if ((value != null))
					{
						value.HISTORY_PRODUCTs.Add(this);
						this._HISTORY_ID = value.ID;
					}
					else
					{
						this._HISTORY_ID = default(int);
					}
					this.SendPropertyChanged("HISTORy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_HISTORY_PRODUCT", Storage="_PRODUCT", ThisKey="PRODUCT_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PRODUCT PRODUCT
		{
			get
			{
				return this._PRODUCT.Entity;
			}
			set
			{
				PRODUCT previousValue = this._PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT.Entity = null;
						previousValue.HISTORY_PRODUCTs.Remove(this);
					}
					this._PRODUCT.Entity = value;
					if ((value != null))
					{
						value.HISTORY_PRODUCTs.Add(this);
						this._PRODUCT_ID = value.ID;
					}
					else
					{
						this._PRODUCT_ID = default(int);
					}
					this.SendPropertyChanged("PRODUCT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HISTORY_TYPES")]
	public partial class HISTORY_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<HISTORy> _HISTORies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public HISTORY_TYPE()
		{
			this._HISTORies = new EntitySet<HISTORy>(new Action<HISTORy>(this.attach_HISTORies), new Action<HISTORy>(this.detach_HISTORies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HISTORY_TYPE_HISTORy", Storage="_HISTORies", ThisKey="ID", OtherKey="HISTORY_TYPE_ID")]
		public EntitySet<HISTORy> HISTORies
		{
			get
			{
				return this._HISTORies;
			}
			set
			{
				this._HISTORies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HISTORies(HISTORy entity)
		{
			this.SendPropertyChanging();
			entity.HISTORY_TYPE = this;
		}
		
		private void detach_HISTORies(HISTORy entity)
		{
			this.SendPropertyChanging();
			entity.HISTORY_TYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOCATIONS")]
	public partial class LOCATION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _COUNTRY_CODE;
		
		private string _LOCATION_1;
		
		private string _LOCATION_2;
		
		private string _LOCATION_3;
		
		private EntitySet<WAREHOUSE> _WAREHOUSEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCOUNTRY_CODEChanging(string value);
    partial void OnCOUNTRY_CODEChanged();
    partial void OnLOCATION_1Changing(string value);
    partial void OnLOCATION_1Changed();
    partial void OnLOCATION_2Changing(string value);
    partial void OnLOCATION_2Changed();
    partial void OnLOCATION_3Changing(string value);
    partial void OnLOCATION_3Changed();
    #endregion
		
		public LOCATION()
		{
			this._WAREHOUSEs = new EntitySet<WAREHOUSE>(new Action<WAREHOUSE>(this.attach_WAREHOUSEs), new Action<WAREHOUSE>(this.detach_WAREHOUSEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUNTRY_CODE", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string COUNTRY_CODE
		{
			get
			{
				return this._COUNTRY_CODE;
			}
			set
			{
				if ((this._COUNTRY_CODE != value))
				{
					this.OnCOUNTRY_CODEChanging(value);
					this.SendPropertyChanging();
					this._COUNTRY_CODE = value;
					this.SendPropertyChanged("COUNTRY_CODE");
					this.OnCOUNTRY_CODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOCATION_1", DbType="NVarChar(100)")]
		public string LOCATION_1
		{
			get
			{
				return this._LOCATION_1;
			}
			set
			{
				if ((this._LOCATION_1 != value))
				{
					this.OnLOCATION_1Changing(value);
					this.SendPropertyChanging();
					this._LOCATION_1 = value;
					this.SendPropertyChanged("LOCATION_1");
					this.OnLOCATION_1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOCATION_2", DbType="NVarChar(100)")]
		public string LOCATION_2
		{
			get
			{
				return this._LOCATION_2;
			}
			set
			{
				if ((this._LOCATION_2 != value))
				{
					this.OnLOCATION_2Changing(value);
					this.SendPropertyChanging();
					this._LOCATION_2 = value;
					this.SendPropertyChanged("LOCATION_2");
					this.OnLOCATION_2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOCATION_3", DbType="NVarChar(100)")]
		public string LOCATION_3
		{
			get
			{
				return this._LOCATION_3;
			}
			set
			{
				if ((this._LOCATION_3 != value))
				{
					this.OnLOCATION_3Changing(value);
					this.SendPropertyChanging();
					this._LOCATION_3 = value;
					this.SendPropertyChanged("LOCATION_3");
					this.OnLOCATION_3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOCATION_WAREHOUSE", Storage="_WAREHOUSEs", ThisKey="ID", OtherKey="LOCATION_ID")]
		public EntitySet<WAREHOUSE> WAREHOUSEs
		{
			get
			{
				return this._WAREHOUSEs;
			}
			set
			{
				this._WAREHOUSEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WAREHOUSEs(WAREHOUSE entity)
		{
			this.SendPropertyChanging();
			entity.LOCATION = this;
		}
		
		private void detach_WAREHOUSEs(WAREHOUSE entity)
		{
			this.SendPropertyChanging();
			entity.LOCATION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCT_CATEGORIES")]
	public partial class PRODUCT_CATEGORy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<PRODUCT> _PRODUCTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public PRODUCT_CATEGORy()
		{
			this._PRODUCTs = new EntitySet<PRODUCT>(new Action<PRODUCT>(this.attach_PRODUCTs), new Action<PRODUCT>(this.detach_PRODUCTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_CATEGORy_PRODUCT", Storage="_PRODUCTs", ThisKey="ID", OtherKey="PRODUCT_CATEGORY_ID")]
		public EntitySet<PRODUCT> PRODUCTs
		{
			get
			{
				return this._PRODUCTs;
			}
			set
			{
				this._PRODUCTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRODUCTs(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT_CATEGORy = this;
		}
		
		private void detach_PRODUCTs(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT_CATEGORy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCTS")]
	public partial class PRODUCT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private decimal _PRICE;
		
		private int _PRODUCT_CATEGORY_ID;
		
		private bool _IS_DELETED;
		
		private EntitySet<HISTORY_PRODUCT> _HISTORY_PRODUCTs;
		
		private EntitySet<WAREHOUSE_PRODUCT> _WAREHOUSE_PRODUCTs;
		
		private EntityRef<PRODUCT_CATEGORy> _PRODUCT_CATEGORy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnPRICEChanging(decimal value);
    partial void OnPRICEChanged();
    partial void OnPRODUCT_CATEGORY_IDChanging(int value);
    partial void OnPRODUCT_CATEGORY_IDChanged();
    partial void OnIS_DELETEDChanging(bool value);
    partial void OnIS_DELETEDChanged();
    #endregion
		
		public PRODUCT()
		{
			this._HISTORY_PRODUCTs = new EntitySet<HISTORY_PRODUCT>(new Action<HISTORY_PRODUCT>(this.attach_HISTORY_PRODUCTs), new Action<HISTORY_PRODUCT>(this.detach_HISTORY_PRODUCTs));
			this._WAREHOUSE_PRODUCTs = new EntitySet<WAREHOUSE_PRODUCT>(new Action<WAREHOUSE_PRODUCT>(this.attach_WAREHOUSE_PRODUCTs), new Action<WAREHOUSE_PRODUCT>(this.detach_WAREHOUSE_PRODUCTs));
			this._PRODUCT_CATEGORy = default(EntityRef<PRODUCT_CATEGORy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRICE", DbType="Money NOT NULL")]
		public decimal PRICE
		{
			get
			{
				return this._PRICE;
			}
			set
			{
				if ((this._PRICE != value))
				{
					this.OnPRICEChanging(value);
					this.SendPropertyChanging();
					this._PRICE = value;
					this.SendPropertyChanged("PRICE");
					this.OnPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCT_CATEGORY_ID", DbType="Int NOT NULL")]
		public int PRODUCT_CATEGORY_ID
		{
			get
			{
				return this._PRODUCT_CATEGORY_ID;
			}
			set
			{
				if ((this._PRODUCT_CATEGORY_ID != value))
				{
					if (this._PRODUCT_CATEGORy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRODUCT_CATEGORY_IDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCT_CATEGORY_ID = value;
					this.SendPropertyChanged("PRODUCT_CATEGORY_ID");
					this.OnPRODUCT_CATEGORY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IS_DELETED", DbType="Bit NOT NULL")]
		public bool IS_DELETED
		{
			get
			{
				return this._IS_DELETED;
			}
			set
			{
				if ((this._IS_DELETED != value))
				{
					this.OnIS_DELETEDChanging(value);
					this.SendPropertyChanging();
					this._IS_DELETED = value;
					this.SendPropertyChanged("IS_DELETED");
					this.OnIS_DELETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_HISTORY_PRODUCT", Storage="_HISTORY_PRODUCTs", ThisKey="ID", OtherKey="PRODUCT_ID")]
		public EntitySet<HISTORY_PRODUCT> HISTORY_PRODUCTs
		{
			get
			{
				return this._HISTORY_PRODUCTs;
			}
			set
			{
				this._HISTORY_PRODUCTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_WAREHOUSE_PRODUCT", Storage="_WAREHOUSE_PRODUCTs", ThisKey="ID", OtherKey="PRODUCT_ID")]
		public EntitySet<WAREHOUSE_PRODUCT> WAREHOUSE_PRODUCTs
		{
			get
			{
				return this._WAREHOUSE_PRODUCTs;
			}
			set
			{
				this._WAREHOUSE_PRODUCTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_CATEGORy_PRODUCT", Storage="_PRODUCT_CATEGORy", ThisKey="PRODUCT_CATEGORY_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PRODUCT_CATEGORy PRODUCT_CATEGORy
		{
			get
			{
				return this._PRODUCT_CATEGORy.Entity;
			}
			set
			{
				PRODUCT_CATEGORy previousValue = this._PRODUCT_CATEGORy.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT_CATEGORy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT_CATEGORy.Entity = null;
						previousValue.PRODUCTs.Remove(this);
					}
					this._PRODUCT_CATEGORy.Entity = value;
					if ((value != null))
					{
						value.PRODUCTs.Add(this);
						this._PRODUCT_CATEGORY_ID = value.ID;
					}
					else
					{
						this._PRODUCT_CATEGORY_ID = default(int);
					}
					this.SendPropertyChanged("PRODUCT_CATEGORy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HISTORY_PRODUCTs(HISTORY_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = this;
		}
		
		private void detach_HISTORY_PRODUCTs(HISTORY_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = null;
		}
		
		private void attach_WAREHOUSE_PRODUCTs(WAREHOUSE_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = this;
		}
		
		private void detach_WAREHOUSE_PRODUCTs(WAREHOUSE_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WAREHOUSE_PRODUCT")]
	public partial class WAREHOUSE_PRODUCT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WAREHOUSE_ID;
		
		private int _PRODUCT_ID;
		
		private int _COUNT;
		
		private EntityRef<PRODUCT> _PRODUCT;
		
		private EntityRef<WAREHOUSE> _WAREHOUSE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWAREHOUSE_IDChanging(int value);
    partial void OnWAREHOUSE_IDChanged();
    partial void OnPRODUCT_IDChanging(int value);
    partial void OnPRODUCT_IDChanged();
    partial void OnCOUNTChanging(int value);
    partial void OnCOUNTChanged();
    #endregion
		
		public WAREHOUSE_PRODUCT()
		{
			this._PRODUCT = default(EntityRef<PRODUCT>);
			this._WAREHOUSE = default(EntityRef<WAREHOUSE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WAREHOUSE_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WAREHOUSE_ID
		{
			get
			{
				return this._WAREHOUSE_ID;
			}
			set
			{
				if ((this._WAREHOUSE_ID != value))
				{
					if (this._WAREHOUSE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWAREHOUSE_IDChanging(value);
					this.SendPropertyChanging();
					this._WAREHOUSE_ID = value;
					this.SendPropertyChanged("WAREHOUSE_ID");
					this.OnWAREHOUSE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCT_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PRODUCT_ID
		{
			get
			{
				return this._PRODUCT_ID;
			}
			set
			{
				if ((this._PRODUCT_ID != value))
				{
					if (this._PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRODUCT_IDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCT_ID = value;
					this.SendPropertyChanged("PRODUCT_ID");
					this.OnPRODUCT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUNT", DbType="Int NOT NULL")]
		public int COUNT
		{
			get
			{
				return this._COUNT;
			}
			set
			{
				if ((this._COUNT != value))
				{
					this.OnCOUNTChanging(value);
					this.SendPropertyChanging();
					this._COUNT = value;
					this.SendPropertyChanged("COUNT");
					this.OnCOUNTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_WAREHOUSE_PRODUCT", Storage="_PRODUCT", ThisKey="PRODUCT_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PRODUCT PRODUCT
		{
			get
			{
				return this._PRODUCT.Entity;
			}
			set
			{
				PRODUCT previousValue = this._PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT.Entity = null;
						previousValue.WAREHOUSE_PRODUCTs.Remove(this);
					}
					this._PRODUCT.Entity = value;
					if ((value != null))
					{
						value.WAREHOUSE_PRODUCTs.Add(this);
						this._PRODUCT_ID = value.ID;
					}
					else
					{
						this._PRODUCT_ID = default(int);
					}
					this.SendPropertyChanged("PRODUCT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WAREHOUSE_WAREHOUSE_PRODUCT", Storage="_WAREHOUSE", ThisKey="WAREHOUSE_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WAREHOUSE WAREHOUSE
		{
			get
			{
				return this._WAREHOUSE.Entity;
			}
			set
			{
				WAREHOUSE previousValue = this._WAREHOUSE.Entity;
				if (((previousValue != value) 
							|| (this._WAREHOUSE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WAREHOUSE.Entity = null;
						previousValue.WAREHOUSE_PRODUCTs.Remove(this);
					}
					this._WAREHOUSE.Entity = value;
					if ((value != null))
					{
						value.WAREHOUSE_PRODUCTs.Add(this);
						this._WAREHOUSE_ID = value.ID;
					}
					else
					{
						this._WAREHOUSE_ID = default(int);
					}
					this.SendPropertyChanged("WAREHOUSE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WAREHOUSES")]
	public partial class WAREHOUSE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private int _LOCATION_ID;
		
		private EntitySet<WAREHOUSE_PRODUCT> _WAREHOUSE_PRODUCTs;
		
		private EntityRef<LOCATION> _LOCATION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnLOCATION_IDChanging(int value);
    partial void OnLOCATION_IDChanged();
    #endregion
		
		public WAREHOUSE()
		{
			this._WAREHOUSE_PRODUCTs = new EntitySet<WAREHOUSE_PRODUCT>(new Action<WAREHOUSE_PRODUCT>(this.attach_WAREHOUSE_PRODUCTs), new Action<WAREHOUSE_PRODUCT>(this.detach_WAREHOUSE_PRODUCTs));
			this._LOCATION = default(EntityRef<LOCATION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOCATION_ID", DbType="Int NOT NULL")]
		public int LOCATION_ID
		{
			get
			{
				return this._LOCATION_ID;
			}
			set
			{
				if ((this._LOCATION_ID != value))
				{
					if (this._LOCATION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLOCATION_IDChanging(value);
					this.SendPropertyChanging();
					this._LOCATION_ID = value;
					this.SendPropertyChanged("LOCATION_ID");
					this.OnLOCATION_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WAREHOUSE_WAREHOUSE_PRODUCT", Storage="_WAREHOUSE_PRODUCTs", ThisKey="ID", OtherKey="WAREHOUSE_ID")]
		public EntitySet<WAREHOUSE_PRODUCT> WAREHOUSE_PRODUCTs
		{
			get
			{
				return this._WAREHOUSE_PRODUCTs;
			}
			set
			{
				this._WAREHOUSE_PRODUCTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOCATION_WAREHOUSE", Storage="_LOCATION", ThisKey="LOCATION_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LOCATION LOCATION
		{
			get
			{
				return this._LOCATION.Entity;
			}
			set
			{
				LOCATION previousValue = this._LOCATION.Entity;
				if (((previousValue != value) 
							|| (this._LOCATION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOCATION.Entity = null;
						previousValue.WAREHOUSEs.Remove(this);
					}
					this._LOCATION.Entity = value;
					if ((value != null))
					{
						value.WAREHOUSEs.Add(this);
						this._LOCATION_ID = value.ID;
					}
					else
					{
						this._LOCATION_ID = default(int);
					}
					this.SendPropertyChanged("LOCATION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WAREHOUSE_PRODUCTs(WAREHOUSE_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.WAREHOUSE = this;
		}
		
		private void detach_WAREHOUSE_PRODUCTs(WAREHOUSE_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.WAREHOUSE = null;
		}
	}
}
#pragma warning restore 1591
